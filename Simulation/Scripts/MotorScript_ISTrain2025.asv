%% run_ISTrain2025.m
% This script configures and runs the ISTrain2025 and  it plots the drive cycle,
% efficiency, torque‐speed map, and battery signals.

clear; close all; clc;
modelName = 'ISTrain2025';   

%% Define fixed vehicle parameters
m_loco    = 600;      % loco mass [kg]
Crr       = 0.004;    % rolling resistance coeff
g         = 9.81;     % gravity [m/s^2]
rw        = 0.100;    % wheel radius [m]
mech_eff  = 0.85;     % drivetrain mechanical efficiency
G         = 5;       % gearbox ratio

%% Solver fixed‑step size (for model config)
StepSize = 0.1;               % [s]
assignin('base','StepSize',StepSize);

%% 0) User choices
mt = 1;    % Motor choice
bt=1;      % Battery choice
dc = 1;    % Drive‑cycle choice


%% 1) Motor parameters as Simulink.Parameter objects
% BLDC HMP‑3000 example values

switch mt

    case 1

    %Description: 
    %BLDC Motor HMP-3000 /   Nominal Power : 3000 W / Nominal Voltage: 48V / Nominal Current: 80 / Nominal Torque: 9.4 N.m / Nominal
    %speed 4000 rpm

    P_nom   = 3000;        % Potência nominal [W]
    V_nom   = 48;          % Tensão nominal [V]
    I_nom   = 80;          % Corrente nominal [A]
    T_nom   = 9.4;         % Binário nominal [Nm]
    rpm_nom = 4000;        % Velocidade nominal [rpm]
    eta_nom=0.9;
    %Motor Parameters
    [Kt, Ke, R, kc, kf, invEff] = estimate_motor_constants(P_nom, V_nom, I_nom, T_nom, rpm_nom, eta_nom);
    % Display results
    
    Kt = Simulink.Parameter(Kt);   Kt.CoderInfo.StorageClass = 'SimulinkGlobal';
    Ke = Simulink.Parameter(Ke);   Ke.CoderInfo.StorageClass = 'SimulinkGlobal';
    R  = Simulink.Parameter(R);    R.CoderInfo.StorageClass  = 'SimulinkGlobal';
    kc = Simulink.Parameter(kc);    kc.CoderInfo.StorageClass = 'SimulinkGlobal';
    kf = Simulink.Parameter(kf);    kf.CoderInfo.StorageClass = 'SimulinkGlobal';
    invEff = Simulink.Parameter(invEff); invEff.CoderInfo.StorageClass = 'SimulinkGlobal';

    % Torque Speed Map
    mapData = readmatrix('HMP-3000.xlsx');
    speed_map_rpm = mapData(:,1);
    torque_map_Nm = mapData(:,2);

    case 2

    %Description: 
    %BLDC_108 /   Nominal Power : 1.5 W / Nominal Voltage: 48V / Nominal Current: 20 / Nominal Torque: 2.5 N.m / Nominal
    %speed 3000 rpm


     %Motor Parameters
    Kt = Simulink.Parameter(0.138);   Kt.CoderInfo.StorageClass = 'SimulinkGlobal';
    Ke = Simulink.Parameter(0.138);   Ke.CoderInfo.StorageClass = 'SimulinkGlobal';
    R  = Simulink.Parameter(0.14);    R.CoderInfo.StorageClass  = 'SimulinkGlobal';
    kc = Simulink.Parameter(0.193);    kc.CoderInfo.StorageClass = 'SimulinkGlobal';
    kf = Simulink.Parameter(2.6e-4);    kf.CoderInfo.StorageClass = 'SimulinkGlobal';
    invEff = Simulink.Parameter(1.11); invEff.CoderInfo.StorageClass = 'SimulinkGlobal';

    % Torque Speed Map
    mapData = readmatrix('BLDC_108.xlsx');
    speed_map_rpm = mapData(:,1);
    torque_map_Nm = mapData(:,2);


    case 3

     %Motor option 3
end

% Push to base workspace
assignin('base','Kt',           Kt);
assignin('base','Ke',           Ke);
assignin('base','R',            R);
assignin('base','kc',           kc);
assignin('base','kf',           kf);
assignin('base','invEff',       invEff);
assignin('base','speed_map_rpm',speed_map_rpm);
assignin('base','torque_map_Nm',torque_map_Nm);

%% 2) Battery Definition


switch bt

    case 1

    %battery option 1

    case 2
    
    %battery option 2


    case 3

    %battery option 4

end



%% 3) Drive‑Cycle Definition


% DRIVE CYCLE DEFINITIONS
switch dc


    case 1
        %% Case 1: 3‑hour drive at constant 5 km/h, 2% gradient, 1800 kg
        v_kmh  = 5;
        v_ms   = v_kmh * 1000/3600;
        duration = 3 * 3600;                 % seconds (3 h)

        time  = (0:1:duration)';             % 1 s resolution
        speed = repmat(v_kmh, numel(time), 1);

        ts_speed = timeseries(speed, time);
        assignin('base','ts_speed',         ts_speed);
        assignin('base','grade',            0.02);
        assignin('base','friction_coeff',   0.004);
        assignin('base','m_trail',          1800);

        stopTime = duration;

    case 2
        %% Case 2: 0→15 km/h at a = 0.3 m/s^2; report acceleration time
        a     = 0.3;                       % [m/s^2]
        v_end = 15 * 1000/3600;           % [m/s]
        t_acc = v_end / a;                % time to reach 15 km/h
        fprintf('Case 2 acceleration time: %.2f s\n', t_acc);

        numPts = ceil(t_acc*10) + 1;
        time   = linspace(0, t_acc, numPts)';
        speed  = (a * time) * 3.6;         % [km/h]

        ts_speed = timeseries(speed, time);
        assignin('base','ts_speed',         ts_speed);
        assignin('base','grade',            0.02);
        assignin('base','friction_coeff',   0.004);
        assignin('base','m_trail',          1800);

        stopTime = time(end);

    case 3
        %% Case 3: 0→11 km/h at a = 0.3 m/s^2; report acceleration time
        a     = 0.3;                       % [m/s^2]
        v_end = 11 * 1000/3600;           % [m/s]
        t_acc = v_end / a;                % time to reach 11 km/h
        fprintf('Case 3 acceleration time: %.2f s\n', t_acc);

        numPts = ceil(t_acc*10) + 1;
        time   = linspace(0, t_acc, numPts)';
        speed  = (a * time) * 3.6;         % [km/h]

        ts_speed = timeseries(speed, time);
        assignin('base','ts_speed',         ts_speed);
        assignin('base','grade',            0.02);
        assignin('base','friction_coeff',   0.004);
        assignin('base','m_trail',          1800);

        stopTime = time(end);

    case 4
        %% Case 4: 3 h at ~5 km/h with one accel burst each hour
        a      = 0.3;                     % [m/s^2]
        v_targets_kmh = [5, 10, 15];
        v_targets_ms  = v_targets_kmh * 1000/3600;
        T_hr = 3600;                      % one hour [s]

        time = [];
        speed = [];
        % Hour 1: ramp 0→5 at start, then hold
        t1r = linspace(0, v_targets_ms(1)/a, ceil((v_targets_ms(1)/a)*10)+1)';
        t1h = (t1r(end)+1 : T_hr)';
        v1r = a * t1r * 3.6;
        v1h = repmat(v_targets_kmh(1), numel(t1h),1);

        % Hour 2: ramp 5→10 at midpoint, then hold
        t2_mid = T_hr + T_hr/2;
        t2r = linspace(t2_mid - (v_targets_ms(2)-v_targets_ms(1))/(2*a), ...
                       t2_mid + (v_targets_ms(2)-v_targets_ms(1))/(2*a), ...
                       ceil(((v_targets_ms(2)-v_targets_ms(1))/a)*10)+1)';
        t2_pre  = (T_hr+1 : t2r(1)-1)';
        t2_post = (t2r(end)+1 : 2*T_hr)';
        v2_pre  = repmat(v_targets_kmh(1), numel(t2_pre),1);
        v2r     = (v_targets_ms(1) + a*(t2r - t2r(1))) *3.6;
        v2_post = repmat(v_targets_kmh(2), numel(t2_post),1);

        % Hour 3: ramp 10→15 at midpoint, then hold
        t3_mid = 2*T_hr + T_hr/2;
        t3r = linspace(t3_mid - (v_targets_ms(3)-v_targets_ms(2))/(2*a), ...
                       t3_mid + (v_targets_ms(3)-v_targets_ms(2))/(2*a), ...
                       ceil(((v_targets_ms(3)-v_targets_ms(2))/a)*10)+1)';
        t3_pre  = (2*T_hr+1 : t3r(1)-1)';
        t3_post = (t3r(end)+1 : 3*T_hr)';
        v3_pre  = repmat(v_targets_kmh(2), numel(t3_pre),1);
        v3r     = (v_targets_ms(2) + a*(t3r - t3r(1))) *3.6;
        v3_post = repmat(v_targets_kmh(3), numel(t3_post),1);

        % Stitch segments
        time  = [t1r; t1h; t2_pre; t2r; t2_post; t3_pre; t3r; t3_post];
        speed = [v1r; v1h; v2_pre; v2r; v2_post; v3_pre; v3r; v3_post];

        ts_speed = timeseries(speed, time);
        assignin('base','ts_speed',         ts_speed);
        assignin('base','grade',            0.02);
        assignin('base','friction_coeff',   0.004);
        assignin('base','m_trail',          1800);

        stopTime = time(end);

    otherwise
        error('Drive‑cycle %d not defined.', dc);
end


%% 4) Plot drive cycle
figure;
plot(time, speed, 'LineWidth',1.5);
xlabel('Time [s]'); ylabel('Speed [km/h]');
title('Drive Cycle'); grid on;

%% 5) Run the Simulink model
simOut = sim(modelName, ...
    'StopTime',   num2str(stopTime), ...
    'FixedStep',  num2str(StepSize), ...
    'SaveOutput', 'on', ...
    'SaveFormat', 'Dataset');

%% 6) Extract logged signals directly from simOut


T_struct     = simOut.T_mech;    
omega_struct = simOut.omega_el;
P_struct     = simOut.P_elec;


volTS        = simOut.voltage;
curTS        = simOut.current;
socTS        = simOut.soc;
crateTS      = simOut.c_rate;


time_sim  = T_struct.time;                    % [s]
T_sim     = T_struct.signals.values;          % [Nm]
omega_sim = omega_struct.signals.values;      % [rad/s]
P_elec    = P_struct.signals.values;          % [W]


tV   = volTS.time;    yV   = volTS.signals.values;
tI   = curTS.time;    yI   = curTS.signals.values;
tSOC = socTS.time;    ySOC = socTS.signals.values;
tC   = crateTS.time;  yC   = crateTS.signals.values;

%% 7) Compute & plot efficiency
P_mech = T_sim .* omega_sim;
eff    = P_mech ./ P_elec; eff(P_elec<1e-6) = 0;
%%

figure;
plot(time_sim, eff, 'LineWidth',1.5);
xlabel('Time [s]'); ylabel('Efficiency \eta');
title('Motor Efficiency'); grid on; ylim([0 1]);

%% 8) Plot torque‑speed map vs. trajectory
figure; hold on; grid on;
plot(speed_map_rpm, torque_map_Nm, 'k--o','LineWidth',1.5);
plot(omega_sim*60/(2*pi), T_sim, '.','MarkerSize',8);
xlabel('Speed [RPM]'); ylabel('Torque [Nm]');
title('Torque‑Speed Map'); legend('Static','Trajectory');

%% 9) Plot battery signals
figure;
subplot(5,1,1);
plot(tV,  yV,  'LineWidth',1.2);
ylabel('Voltage [V]'); title('Battery Voltage'); grid on;

subplot(5,1,2);
plot(tI,  yI,  'LineWidth',1.2);
ylabel('Current [A]'); title('Battery Current'); grid on;

subplot(5,1,3);
plot(tSOC,ySOC,'LineWidth',1.2);
ylabel('SOC [%]'); title('State of Charge'); grid on;

subplot(5,1,4);
plot(tC,  yC,  'LineWidth',1.2);
xlabel('Time [s]'); ylabel('C‑rate'); title('Charge/Discharge C‑rate'); grid on;

subplot(5,1,5);
plot(tC,  yC,  'LineWidth',1.2);
xlabel('Time [s]'); ylabel('C‑rate'); title('Charge/Discharge C‑rate'); grid on;